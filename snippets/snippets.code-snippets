{
    "New Button":{
        "description": "Create a new Button",
        "scope": "typescript",
        "prefix": "new.button.djs.v14",
        "body": [
            "new ButtonBuilder({",
            "    customId: \"\"," ,
            "    label: \"\", ",
            "    style: ButtonStyle.Success",
            "})"
        ]
    },
    "New StringSelect":{
        "description": "Create a new String Select",
        "scope": "typescript",
        "prefix": "new.stringselect.djs.v14",
        "body": [
            "new StringSelectMenuBuilder({",
            "    customId: \"$1\",",
            "    placeholder: \"$2\",",
            "    options: [",
            "        { label: \"\", value: \"\", description: \"\" },",
            "        { label: \"\", value: \"\", description: \"\" }",
            "    ]",
            "})",
        ]
    },
    "New ChannelSelect":{
        "description": "Create a new Channel Select",
        "scope": "typescript",
        "prefix": "new.channelselect.djs.v14",
        "body": [
            "new ChannelSelectMenuBuilder({",
            "    customId: \"\",",
            "    placeholder: \"\",",
            "    channelTypes: [ChannelType.GuildText]",
            "});"
        ]
    },
    "New RoleSelect":{
        "description": "Create a new Role Select",
        "scope": "typescript",
        "prefix": "new.roleselect.djs.v14",
        "body": [
            "new RoleSelectMenuBuilder({",
            "    customId: \"\",",
            "    placeholder: \"\",",
            "});"
        ]
    },
    "New UserSelect":{
        "description": "Create a new User Select",
        "scope": "typescript",
        "prefix": "new.userselect.djs.v14",
        "body": [
            "new UserSelectMenuBuilder({",
            "    customId: \"\",",
            "    placeholder: \"\",",
            "});"
        ]
    },
    "New Modal":{
        "description": "Create a new Modal",
        "scope": "typescript",
        "prefix": "new.modal.djs.v14",
        "body": [
            "new ModalBuilder({",
            "    customId: \"$1\",",
            "    title: \"$2\",",
            "    components: [",
            "        ",
            "    ]",
            "})",
        ]
    },
    "New ActionRow":{
        "description": "Create a new ActionRow",
        "scope": "typescript",
        "prefix": "new.actionrow.djs.v14",
        "body": [
            "new ActionRowBuilder<$1>({components: []})"
        ]
    },
    "New TextInput":{
        "description": "Create a new TextInput",
        "scope": "typescript",
        "prefix": "new.textinput.djs.v14",
        "body": [
            "new TextInputBuilder({",
            "    customId: \"$1\",",
            "    label: \"$2\",",
            "    placeholder: \"$3\",",
            "    style: TextInputStyle.Short,",
            "    required: true",
            "})"
        ]
    },
    "New Simple Embed":{
        "description": "Create a new simple embed",
        "scope": "typescript",
        "prefix": "new.embed.simple.djs.v14",
        "body": [
            "new EmbedBuilder({",
            "    title: \"$1\",",
            "    description: \"$2\"",
            "})"
        ]
    },
    "New Normal Embed":{
        "description": "Create a new normal embed",
        "scope": "typescript",
        "prefix": "new.embed.normal.djs.v14",
        "body": [
            "new EmbedBuilder({",
            "    title: \"$1\",",
            "    description: \"$2\",",
            "    thumbnail: {url: \"$3\"},",
            "    color: 23316831,",
            "})"
        ]
    },
    "New Complete Embed":{
        "description": "Create a new complete embed",
        "scope": "typescript",
        "prefix": "new.embed.complete.djs.v14",
        "body": [
            "new EmbedBuilder({",
            "    title: \"$1\",",
            "    url: \"\",",
            "    author: {",
            "        name: \"$3\",",
            "        iconURL: \"\"",
            "    },",
            "    description: \"$4\",",
            "    thumbnail: {url: \"\"},",
            "    image: {url: \"\"},",
            "    color: 23316831,",
            "})"
        ]
    },
    "New Full Embed":{
        "description": "Create a new full embed",
        "scope": "typescript",
        "prefix": "new.embed.full.djs.v14",
        "body": [
            "new EmbedBuilder({",
            "    title: \"$1\",",
            "    url: \"\",",
            "    author: {",
            "        name: \"$2\",",
            "        iconURL: \"\",",
            "        url: \"\",",
            "    },",
            "    description: \"$3\",",
            "    thumbnail: {url: \"\"},",
            "    image: {url: \"\"},",
            "    color: 23316831,",
            "    footer: {",
            "        text: \"$4\",",
            "        iconURL: \"\",",
            "    },",
            "    timestamp: new Date(),",
            "    fields: [",
            "        {name: \"\", value: \"\", inline: false},",
            "        {name: \"\", value: \"\", inline: false},",
            "    ]",
            "})"
        ]
    },
    "Interaction Reply Content":{
        "description": "Setup a content interaction reply",
        "scope": "typescript",
        "prefix": "reply.content.djs.v14",
        "body": [
            "interaction.reply({ flags: [\"Ephemeral\"], content: \"$1\"})"
        ]
    },
    "Interaction Reply Embeds":{
        "description": "Setup a embeds interaction reply",
        "scope": "typescript",
        "prefix": "reply.embeds.djs.v14",
        "body": [
            "interaction.reply({ flags: [\"Ephemeral\"], embeds: [$1]})"
        ]
    },
    "Interaction Reply Embeds and Components":{
        "description": "Setup a embeds and components interaction reply",
        "scope": "typescript",
        "prefix": "reply.embeds.components.djs.v14",
        "body": [
            "interaction.reply({ flags: [\"Ephemeral\"], embeds: [$1], components: [$2]})"
        ]
    },
    "Interaction Reply Content and Components":{
        "description": "Setup a content and components interaction reply",
        "scope": "typescript",
        "prefix": "reply.content.components.djs.v14",
        "body": [
            "interaction.reply({ flags: [\"Ephemeral\"], content: \"$1\", components: [$2]})"
        ]
    },
    "Interaction Reply Embeds and Files":{
        "description": "Setup a embeds and files interaction reply",
        "scope": "typescript",
        "prefix": "reply.embeds.files.djs.v14",
        "body": [
            "interaction.reply({ flags: [\"Ephemeral\"], embeds: [$1], files: [$2]})"
        ]
    },
    "Interaction Reply Complete":{
        "description": "Setup a complete interaction reply",
        "scope": "typescript",
        "prefix": "reply.complete.djs.v14",
        "body": [
            "interaction.reply({ flags: [\"Ephemeral\"], embeds: [$1], files: [$2], components: [$3]})"
        ]
    },
    "Create a Button Collector":{
        "description": "Create a button collector",
        "scope": "typescript",
        "prefix": "collector.button.djs.v14",
        "body": [
            "const collector = msg.createMessageComponentCollector({componentType: ComponentType.Button, time: 30_000})",
            "collector.on(\"collect\", async subInteraction => {",
            "    // do things",
            "})"
        ]
    },
    "Create a SelectMenu Collector":{
        "description": "Create a selectmenu collector",
        "scope": "typescript",
        "prefix": "collector.selectmenu.djs.v14",
        "body": [
            "const collector = msg.createMessageComponentCollector({componentType: ComponentType.StringSelect, time: 30_000})",
            "collector.on(\"collect\", async subInteraction => {",
            "    // do things",
            "})"
        ]
    },
    "Create a Message Collector":{
        "description": "Create a message collector",
        "scope": "typescript",
        "prefix": "collector.message.djs.v14",
        "body": [
            "const collector = channel.createMessageCollector({filter: m => m.author.id == interaction.user.id, time: 30_000})",
            "collector.on(\"collect\", async message => {",
            "    // do things",
            "})"    
        ]
    },
    "Await a Button Interaction":{
        "description": "Await a button interaction",
        "scope": "typescript",
        "prefix": "await.button.djs.v14",
        "body": [
            "const buttonInteraction = await msg.awaitMessageComponent({componentType: ComponentType.Button, time: 30_000}).catch(() => null)",
            "if (buttonInteraction){",
            "    // do things ...",
            "}"
        ]
    },
    "Await a SelectMenu Interaction":{
        "description": "Await a selectmenu Interaction",
        "scope": "typescript",
        "prefix": "await.selectmenu.djs.v14",
        "body": [
            "const selectInteraction = await msg.awaitMessageComponent({componentType: ComponentType.StringSelect, time: 30_000}).catch(() => null)",
            "if (selectInteraction){",
            "    // do things ...",
            "}"
        ]
    },
    "Await a Message":{
        "description": "Await a message Interaction",
        "scope": "typescript",
        "prefix": "await.message.djs.v14",
        "body": [
            "const messages = await channel.awaitMessages({time: 30_000, max: 1, filter: m => m.author.id == interaction.user.id}).catch(() => null)"
        ]
    },
    "Await a Modal Interaction":{
        "description": "Await a modal interaction",
        "scope": "typescript",
        "prefix": "await.modal.djs.v14",
        "body": [
            "const modalInteraction = await interaction.awaitModalSubmit({time: 30_000, filter: m => m.user.id == interaction.user.id}).catch(() => null)",
            "if (modalInteraction){",
            "    // do things...",
            "}"
        ]
    },
    "Find Channel by Name":{
        "description": "Find a channel by name",
        "scope": "typescript",
        "prefix": "find.channel.name.v14",
        "body": [
            "guild.channels.cache.find(c => c.name == $1);"
        ]
    },
    "Find Channel by Name and Type":{
        "description": "Find a channel by name and type",
        "scope": "typescript",
        "prefix": "find.channel.name.type.v14",
        "body": [
            "guild.channels.cache.find(c => c.name == $1 && ChannelType.$2);"
        ]
    },
    "Get Channel by id":{
        "description": "Get a channel by id",
        "scope": "typescript",
        "prefix": "get.channel.v14",
        "body": [
            "guild.channels.cache.get($1);"
        ]
    },
    "Get Role by id":{
        "description": "Get a role by id",
        "scope": "typescript",
        "prefix": "get.role.v14",
        "body": [
            "guild.roles.cache.get($1);"
        ]
    },
    "Get Member by id":{
        "description": "Get a member by id",
        "scope": "typescript",
        "prefix": "get.member.v14",
        "body": [
            "guild.members.cache.get($1);"
        ]
    },
}